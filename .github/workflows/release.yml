name: Release on Merge

on:
  push:
    branches: [main, master]

permissions:
  contents: write # 需要写 tag/release

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.plan.outputs.matrix }}
      count: ${{ steps.plan.outputs.count }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Generate matrix
        id: plan
        run: |
          node scripts/ci/plan-changed-packages.mjs > matrix.json
          echo "matrix=$(jq -c '.include' matrix.json)" >> "$GITHUB_OUTPUT"
          echo "count=$(jq '.include | length' matrix.json)" >> "$GITHUB_OUTPUT"
          echo "==== Plan ===="
          cat matrix.json

  build:
    needs: plan
    if: needs.plan.outputs.count != '0'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.plan.outputs.matrix) }}

    defaults:
      run:
        working-directory: ${{ matrix.dir }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Enable npm cache (if lockfile exists)
        if: ${{ hashFiles(format('{0}/package-lock.json', matrix.dir)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          cache-dependency-path: ${{ matrix.dir }}/package-lock.json

      # 仅 YAML (node14/16) 需要 lcap
      - name: Install LCAP CLI (yaml only)
        if: ${{ matrix.node == '14' || matrix.node == '16' }}
        run: |
          npm i -g lcap@latest || (echo "⚠️ lcap install failed" && exit 1)
          lcap --version || true

      - name: Build package
        run: |
          set -e
          node -e '
            const {execSync} = require("child_process");
            const steps = ${{ toJson(matrix.build) }};
            for (const cmd of steps) {
              console.log("+ " + cmd);
              execSync(cmd, {stdio:"inherit", shell:true});
            }
          '

      # 只收集 zip；保持原文件名
      - name: Stash ZIPs to workspace
        run: |
          set -e
          mkdir -p "$GITHUB_WORKSPACE/_release/${{ matrix.name }}"
          shopt -s nullglob
          zips=(*@*.*.*.zip)
          if [ ${#zips[@]} -gt 0 ]; then
            for z in "${zips[@]}"; do
              cp -f "$z" "$GITHUB_WORKSPACE/_release/${{ matrix.name }}/"
              echo "copied: $z"
            done
          else
            echo "No zip found in $PWD"
          fi

      # 用于生成 Release 说明
      - name: Append summary row
        run: |
          mkdir -p $GITHUB_WORKSPACE/_release/__meta
          echo "${{ matrix.name }}|${{ matrix.stack || 'unknown' }}" >> $GITHUB_WORKSPACE/_release/__meta/summary.tsv

  release:
    needs: [plan, build]
    if: needs.plan.outputs.count != '0'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Show collected files
        run: |
          echo "Collected files under _release:"
          ls -R _release || true

      - name: Generate tag
        id: tag
        run: |
          TAG="build-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Tag: $TAG"

      - name: Create tag
        run: |
          git tag ${{ steps.tag.outputs.tag }}
          git push origin ${{ steps.tag.outputs.tag }}

      - name: Build release body
        id: body
        run: |
          mkdir -p _release/__meta
          echo "# Components in this release" > _release/__meta/RELEASE_BODY.md
          echo "" >> _release/__meta/RELEASE_BODY.md
          if [ -f _release/__meta/summary.tsv ]; then
            echo "| Component | Stack | Assets |" >> _release/__meta/RELEASE_BODY.md
            echo "|---|---|---|" >> _release/__meta/RELEASE_BODY.md
            while IFS="|" read -r name stack; do
              ASSETS=""
              if compgen -G "_release/${name}/*@*.*.*.zip" > /dev/null; then
                for Z in _release/${name}/*@*.*.*.zip; do
                  base=$(basename "$Z")
                  ASSETS="$ASSETS $base"
                done
              fi
              echo "| ${name} | ${stack} | ${ASSETS:--(none)-} |" >> _release/__meta/RELEASE_BODY.md
            done < _release/__meta/summary.tsv
          else
            echo "_No components were summarized._" >> _release/__meta/RELEASE_BODY.md
          fi
          {
            echo "body<<EOF"
            cat _release/__meta/RELEASE_BODY.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          - name: Create GitHub Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ steps.tag.outputs.tag }}
            release_name: Release ${{ steps.tag.outputs.tag }}
            body: ${{ steps.body.outputs.body }}
            draft: false
            prerelease: false

        # 上传所有 zip 资产
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: _release/**/*@*.*.*.zip
          asset_name: ${{ github.run_id }}.zip
          asset_content_type: application/zip
